import cotls;
include "file_io";
pragma mode = randomized;

string fname = "myciel3.col";
string directory = "../tests/";
int[,] mat = readDimacsGraph(directory + fname);
//showMat(mat);

int n = mat.getSize(0);
range N = 1..n;
range D = 0..1;

//UniformDistribution dist(D);
RandomPermutation perm(N);

Solver<LS> ls();

   //var{int} mds[i in N] (ls, D) := dist.get();
   // minimum dominating set, 1 means vertex belongs to mds 0 it doesnt
   var{int} mds[i in N] (ls, D);
   forall (i in 1..n/2){
      mds[perm.get()] := 0;
   }
    forall (i in 1..n/2){
      mds[perm.get()] := 1;
   }

   // set of vertices, 1 means vertex its covered 0 its not
   var{int} c[i in N] (ls, D);
   forall (i in N, j in N: j > i && mat[i, j] == 1 && (mds[i] == 1 || mds[j] == 1) ){
      c[i] := 1;
      c[j] := 1;
   }

   // all vertices nee to be covered
   ConstraintSystem<LS> C(ls);
      forall (i in N) {
         C.post(c[i] == 1);
      }
   // we want min vertices belonging to mds, nr violations to S is mds size
   ConstraintSystem<LS> S(ls);
      forall (i in N) {
         S.post(mds[i] == 0);
      }
   Function<LS> F = nbDistinct(mds);
   

ls.close();

int maxit = 100*n;
int it = 0;
while(it < maxit && C.violations() > 0) {
   selectMin(i in N) (C.violations(c[i])) {
     selectMin(i in N) (S.violations(mds[i])){
        //TODO
     }
   }
   it = it + 1;
}

cout << " ----------- " << endl;
cout << " vertex covered: " << c << endl;
cout << " with violations = "<< C.violations() << endl;
cout << " mds: " << mds << endl;
cout << " mds size = "<< S.violations() << endl;