import cotls;
include "file_io";
pragma mode = randomized;

int t1 = System.getCPUTime();
string fname = "gplus_10000.col";
string directory = "../tests/";
int[,] mat = readDimacsGraph(directory + fname);
//showMat(mat);

int n = mat.getSize(0);
range Vertices = 1..n;
range D = 0..1;

Solver<LS> ls();
    ConstraintSystem<LS> S(ls);
   /**
      Array of all vertices with values 0 or 1
      0 means it doesn't belong to the dominating set
      1 means it belongs
   */
   var{int} s[i in Vertices] (ls, D) := 0;

   //Seed, start with a random vertex set to 1
   select(v in Vertices)
         s[v] := 1;

   /**
      For every vertex that is covered it needs to be in the set
      or have a neighbour that is, this means for all vertices of s
      the sum of the vertex with the sum of all its neighbors has to be 1 or bigger.
   */
   forall (i in Vertices) {
      S.post(1 <= s[i] + sum(j in Vertices:  mat[i, j] > 0) (s[j]) );
   }
   
   // Function for the size of the set
   FunctionExpr<LS> F( sum (v in Vertices) s[v] );

   /** 
      Otimisation function
      gives more importance to covering all vertices than minimizing the set (ratio 11:10)
   */
   Function<LS> G = 11*S + 10*F;

   // Pointer for the violations
   var{int} violations = S.violations();
    
ls.close();
int d = 1;
int sol[Vertices];

int maxit = 2*n;
int max_change = n;
int it = 0;
int best = violations; int best_s = n; int best_it = it;

while(it < maxit && d <= max_change) {
// diversify - select a new neighbourhood
   forall(i in 1..d)
      select(v in Vertices){
         s[v] := 1-s[v];
      }
// greedy search for a local optimum
   bool improvement = true;
   while (improvement) {
      selectMin(i in Vertices, delta = G.getAssignDelta(s[i], 1-s[i])) (delta){
         if (delta < 0){
            s[i] := 1-s[i];
         } else
            improvement = false;
         }
      it = it + 1;
   }
// keep best and prepare diversification
   if (violations < best || (violations == 0 && F.evaluation() < best_s)){
      d = 1;
      best = violations;
      best_s = F.evaluation();
      best_it = it;
      forall(i in Vertices)
         sol[i] = s[i];
      cout << "best so far of " << best << " with size " << best_s <<" at iteration " << best_it << endl;
   } else
      d = d + 1;
 
   it++;
}
int t2 = System.getCPUTime();

cout << " ----------- " << endl;
cout << " best iteration : "<< best_it << endl;
cout << " best violations : "<< best << endl;
cout << " best mds : "<< best_s << endl;
cout << " cpu time (ms) = " << t2-t1 <<endl;