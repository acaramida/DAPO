import cotls;
include "file_io";
pragma mode = randomized;

string fname = "pokec_2000.col";
string directory = "../tests/";
int[,] mat = readDimacsGraph(directory + fname);
//showMat(mat);

int n = mat.getSize(0);
range Vertices = 1..n;
range D = 0..1;

UniformDistribution dist(D);

Solver<LS> ls();
   ConstraintSystem<LS> S(ls);
   var{int} s[i in Vertices] (ls, D) := dist.get();
   forall (i in Vertices, w in Vertices: mat[i, w] > 0) {
      S.post(s[i] + s[w] > 0);
   }

   FunctionExpr<LS> F( sum (v in Vertices) s[v] );
   
   Function<LS> G = 3*S + 2*F;

   var{int} violations = S.violations();
    
ls.close();

int it = 0;
int best = violations;
int tbl = 4; int tblMin = 2; int tblMax = 8; int tabu[Vertices] = 0;
int t1 = System.getCPUTime();
while(violations > 0) {
   int restart;
   int old = violations;
   selectMin(i in Vertices, delta = G.getAssignDelta(s[i], 1-s[i]): tabu[i] <= it || delta + violations < best) (delta){
      tabu[i] = it + tbl;
      s[i] := 1-s[i];
      restart = delta;
      if (violations < old && tbl > tblMin)
         tbl--;
      if (violations >= old && tbl < tblMax)
         tbl++;

      cout << " change var " << i << " to "<< 1-s[i] <<"; delta = "<< delta << endl;  
      cout << "-- iteration = " << it << "; violations = " << S.violations() <<"; set size = "<< F.evaluation() << endl;
   
   }
   
   if (violations < best){
      best = violations;
   } 

   if (restart >= 0 && best > 0) {
      with delay(ls)
         forall (i in Vertices)
            s[i] := dist.get();
     best = violations;
   }
   it++;
}

int t2 = System.getCPUTime();

cout << " ----------- " << endl;
cout << "cpu time (ms) = " << t2-t1 <<endl;