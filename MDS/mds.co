import cotls;
include "file_io";
pragma mode = randomized;

string fname = "gplus_10000.col";
string directory = "../tests/";
int[,] mat = readDimacsGraph(directory + fname);
//showMat(mat);

int n = mat.getSize(0);
range Vertices = 1..n;
range D = 0..1;
int maxAdj[Vertices] = 0;
bool covered[Vertices] = false;

UniformDistribution dist(D);
RandomPermutation perm(Vertices);

Solver<LS> ls();
   // calc max adj for every v
   forall(i in Vertices, j in Vertices: mat[i, j] > 0){
      maxAdj[i] += 1;
   }
   // 1 means vertex belongs to mds, 0 it doesnt
   /*var{int} minSet[i in Vertices] (ls, D) := dist.get();
   forall(i in Vertices: minSet[i] == 1){
      covered[i] = true;
      forall(w in Vertices: mat[i, w] > 0){
         covered[w] = true;
         minSet[w] := 0;
      }
   }*/

   var{int} minSet[i in Vertices] (ls, D) := 0;
   int v = perm.get();
   minSet[v] := 1;
   covered[v] = true;

   forall(w in Vertices: mat[v, w] > 0){
      covered[w] = true;
      minSet[w] := 0;
   }

   forall(i in Vertices: !covered[i]){   
      minSet[i] := 1;
      covered[i] = true;
      forall(w in Vertices: mat[i, w] > 0 && !covered[w]){
         covered[w] = true;
         minSet[w] := 0;
      }
   }
    
ls.close();

int maxit = 100*n;
int it = 0;
//while(it < maxit) {
      

   //it++;
//}

cout << " ----------- " << endl;
cout << " max: " << max(i in Vertices) (maxAdj[i]) << endl;
cout << " mds: " << minSet << endl;
cout << " size: "<< sum(i in Vertices) (minSet[i] == 1) << endl;
cout << " covered: "<< sum(i in Vertices) (covered[i] == true) << endl;
//cout << weight << endl;
//cout << "size: " << weight.getSize() << endl;