import cotls;
include "file_io";
pragma mode = randomized;

string fname = "david.col";
string directory = "../tests/";
int[,] mat = readDimacsGraph(directory + fname);
//showMat(mat);

int n = mat.getSize(0);
range Vertices = 1..n;
range D = 0..1;
int ratio = 1;

UniformDistribution dist(D);

Solver<LS> ls();
   ConstraintSystem<LS> S(ls);
   var{int} s[i in Vertices] (ls, D) := dist.get();

   forall (i in Vertices, w in Vertices: mat[i, w] > 0) {
      S.post(s[i] + s[w] > 0);
   }

   var{int} violations = S.violations();
   FunctionExpr<LS> F( sum (v in Vertices) s[v] );
   Function<LS> G = ratio * S + F;
    
ls.close();

int maxit = 100*n;
int it = 0;

int t1 = System.getCPUTime();

while(it < maxit && violations > 0) {
      selectMin(i in Vertices) (G.getAssignDelta(s[i], 1-s[i])){
         s[i] := 1-s[i];

         cout << " change var " << i << " to "<< 1-s[i] << endl;  
         cout << "-- iteration = " << it << "; violations = " << violations <<endl;
      
      }
   it++;
}
int t2 = System.getCPUTime();

cout << " ----------- " << endl;
cout << " set: "<< s << endl;
cout << " mds: "<< sum(i in Vertices)(s[i] == 1) << endl;
cout << "cpu time (ms) = " << t2-t1 <<endl;