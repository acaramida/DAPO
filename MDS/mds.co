import cotls;
include "file_io";
pragma mode = randomized;

string fname = "david.col";
string directory = "../tests/";
int[,] mat = readDimacsGraph(directory + fname);
showMat(mat);

int n = mat.getSize(0);
range N = 1..n;
range D = 0..1;

UniformDistribution dist(D);

// return vertex that can cover the most vertices
function int getMax(var{int}[] covered, int N, int[,] mat, var{int}[] weight) {
   
   return 1;
}

Solver<LS> ls();

   var{int} weight[i in N] (ls, N) := 0;
   forall (i in N, j in N: mat[i, j] == 1){
      weight[i] := weight[i] + 1;
   }

   // minimum dominating set, 1 means vertex belongs to mds 0 it doesnt
   var{int} mds[i in N] (ls, D) := dist.get();

   // set of vertices, 1 means vertex its covered 0 its not
   var{int} c[i in N] (ls, D) := 0;
  /* forall (i in N, j in N: j > i && mat[i, j] == 1 && (mds[i] == 1 || mds[j] == 1) ){
      c[i] := 1;
      c[j] := 1;
   }*/

   // all vertices need to be covered
   ConstraintSystem<LS> C(ls);
      forall (i in N) {
         C.post(c[i] == 1);
      }
   ConstraintSystem<LS> S(ls);
      forall (i in N) {
         S.post(mds[i] == 0);
      }
   

ls.close();

int maxit = 100*n;
int it = 0;
while(it < maxit && C.violations() > 0) {
   //TODO
   it = it + 1;
}

cout << " ----------- " << endl;
/*cout << " vertex covered: " << c << endl;
cout << " with violations = "<< C.violations() << endl;
cout << " mds: " << mds << endl;
cout << " size: "<< S.violations() << endl;*/
cout << weight << endl;
cout << "size: " << weight.getSize() << endl;